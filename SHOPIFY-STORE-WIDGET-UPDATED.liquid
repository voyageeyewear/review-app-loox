<div class="product-reviews-section" id="product-reviews-{{ section.id }}">
  <style>
    .product-reviews-section {
      font-family: system-ui, -apple-system, sans-serif;
      max-width: 100%;
      margin: 30px 0;
      padding: 20px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      background-color: #ffffff;
    }
    
    .reviews-title {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 1rem;
      color: #1f2937;
      text-align: left;
    }
    
    .reviews-summary {
      display: none;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 1rem;
      font-size: 1.1rem;
    }
    
    .reviews-stars {
      color: #ffd700;
      font-size: 1.2rem;
    }
    
    .reviews-loading, .reviews-empty {
      text-align: center;
      padding: 2rem;
      color: #6b7280;
      background: #f9fafb;
      border-radius: 6px;
      border: 1px solid #e5e7eb;
    }
    
    .review-item {
      border-bottom: 1px solid #e5e7eb;
      padding: 1rem 0;
    }
    
    .review-item:last-child {
      border-bottom: none;
    }
    
    .review-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.5rem;
    }
    
    .review-customer {
      font-weight: 600;
      color: #1f2937;
    }
    
    .review-date {
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    .review-text {
      margin: 0.5rem 0;
      line-height: 1.6;
      color: #374151;
    }
    
    .review-images {
      display: flex;
      gap: 8px;
      margin-top: 12px;
      flex-wrap: wrap;
    }
    
    .review-image {
      width: 80px;
      height: 80px;
      border-radius: 6px;
      object-fit: cover;
      cursor: pointer;
      border: 1px solid #e5e7eb;
      transition: transform 0.2s ease;
    }
    
    .review-image:hover {
      transform: scale(1.05);
      border-color: #3b82f6;
    }
    
    .write-review-btn {
      background: #10b981;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 6px;
      text-decoration: none;
      display: inline-block;
      margin-top: 1rem;
      font-weight: 500;
    }
    
    .write-review-btn:hover {
      background: #059669;
      text-decoration: none;
      color: white;
    }
    
    .group-info {
      background: #dbeafe;
      border: 1px solid #3b82f6;
      border-radius: 6px;
      padding: 12px;
      margin-bottom: 20px;
      font-size: 14px;
      color: #1d4ed8;
    }
    
    .success-msg {
      background: #d1fae5;
      border: 1px solid #a7f3d0;
      color: #065f46;
      padding: 0.5rem;
      border-radius: 4px;
      font-size: 0.875rem;
      margin-bottom: 1rem;
    }
    
    @media (max-width: 768px) {
      .product-reviews-section {
        padding: 1rem;
      }
      
      .review-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
      }
    }
  </style>

  <h3 class="reviews-title">‚≠ê Customer Reviews</h3>
  
  <div class="reviews-summary">
    <div class="reviews-stars"></div>
    <span class="reviews-rating-text"></span>
  </div>
  
  <div id="reviews-content-{{ section.id }}">
    <div class="reviews-loading">üîÑ Loading reviews...</div>
  </div>
  
  <a href="#" id="write-review-link-{{ section.id }}" 
     class="write-review-btn" target="_blank" style="display: none;">
    ‚úçÔ∏è Write a Review
  </a>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const sectionId = '{{ section.id }}';
  const productId = '{{ product.id }}';
  const reviewsLimit = 10;
  
  // üö® UPDATED: Current working port 61885 is now FIRST in the list
  const possibleUrls = [
    `http://localhost:61885/api/reviews?productId=${encodeURIComponent(productId)}&limit=${reviewsLimit}`,
    `http://localhost:61885/api/reviews?productId=${encodeURIComponent(productId)}&limit=${reviewsLimit}`,
    `http://localhost:61885/api/reviews?productId=${encodeURIComponent(productId)}&limit=${reviewsLimit}`,
    `http://localhost:61885/api/reviews?productId=${encodeURIComponent(productId)}&limit=${reviewsLimit}`,
    `http://localhost:61885/api/reviews?productId=${encodeURIComponent(productId)}&limit=${reviewsLimit}`,
    `http://localhost:61885/api/reviews?productId=${encodeURIComponent(productId)}&limit=${reviewsLimit}`,
    `http://localhost:61885/api/reviews?productId=${encodeURIComponent(productId)}&limit=${reviewsLimit}`,
    `http://localhost:61885/api/reviews?productId=${encodeURIComponent(productId)}&limit=${reviewsLimit}`
  ];
  
  const content = document.getElementById(`reviews-content-${sectionId}`);
  const summary = document.querySelector(`#product-reviews-${sectionId} .reviews-summary`);
  const writeReviewLink = document.getElementById(`write-review-link-${sectionId}`);
  
  if (!productId || productId === '') {
    content.innerHTML = '<div class="reviews-empty">‚ùå Product not found</div>';
    return;
  }
  
  console.log(`üöÄ Trying to load reviews for product ${productId}...`);
  
  async function tryApiUrls() {
    for (let i = 0; i < possibleUrls.length; i++) {
      const apiUrl = possibleUrls[i];
      
      try {
        console.log(`üîç Attempt ${i + 1}/${possibleUrls.length}: ${apiUrl}`);
        
        const response = await fetch(apiUrl);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`‚úÖ SUCCESS with: ${apiUrl}`, data);
        
        // Set up write review button
        const baseUrl = apiUrl.split('/api/')[0];
        if (writeReviewLink) {
          writeReviewLink.href = `${baseUrl}/submit-review/${productId}`;
          writeReviewLink.style.display = 'inline-block';
        }
        
        if (data.success && data.reviews && data.reviews.length > 0) {
          let html = `
            <div class="success-msg">
              ‚úÖ Successfully loaded ${data.reviews.length} reviews from port ${new URL(apiUrl).port}
            </div>
          `;
          
          // Show group info if product is grouped
          if (data.groupInfo && data.groupInfo.isGrouped) {
            html += `
              <div class="group-info">
                üì¶ <strong>${data.groupInfo.name}</strong> - Reviews from ${data.groupInfo.productIds.length} product variants
              </div>
            `;
          }
          
          // Show summary
          if (data.summary && data.summary.totalReviews > 0) {
            const summaryStars = summary.querySelector('.reviews-stars');
            const summaryText = summary.querySelector('.reviews-rating-text');
            
            if (summaryStars && summaryText) {
              const rating = Math.round(data.summary.averageRating);
              summaryStars.innerHTML = '‚òÖ'.repeat(rating) + '‚òÜ'.repeat(5 - rating);
              summaryText.textContent = `${data.summary.averageRating.toFixed(1)} (${data.summary.totalReviews} review${data.summary.totalReviews !== 1 ? 's' : ''})`;
              summary.style.display = 'flex';
            }
          }
          
          // Show reviews
          const reviewsHtml = data.reviews.map(review => {
            const date = new Date(review.createdAt).toLocaleDateString();
            const stars = '‚òÖ'.repeat(review.rating) + '‚òÜ'.repeat(5 - review.rating);
            
            // Handle images
            const images = review.mediaUrls || [];
            const imagesHtml = images.length > 0 ? `
              <div class="review-images">
                ${images.map(url => `
                  <img src="${url}" 
                       class="review-image" 
                       onclick="window.open('${url}', '_blank')"
                       alt="Review image by ${review.customerName}">
                `).join('')}
              </div>
            ` : '';
            
            return `
              <div class="review-item">
                <div class="review-header">
                  <div class="review-customer">üë§ ${review.customerName}</div>
                  <div class="review-date">${date}</div>
                </div>
                <div class="reviews-stars">${stars}</div>
                <div class="review-text">${review.reviewText}</div>
                ${imagesHtml}
              </div>
            `;
          }).join('');
          
          content.innerHTML = html + reviewsHtml;
        } else {
          content.innerHTML = `
            <div class="success-msg">
              ‚úÖ Connected to port ${new URL(apiUrl).port}
            </div>
            <div class="reviews-empty">
              No reviews yet. Be the first to review this product!
            </div>
          `;
        }
        
        return; // Success, exit the loop
        
      } catch (error) {
        console.log(`‚ùå Failed with ${apiUrl}:`, error);
        
        // If this is the last URL and it failed
        if (i === possibleUrls.length - 1) {
          content.innerHTML = `
            <div class="reviews-empty">
              ‚ùå Unable to connect to review server<br>
              <strong>Please start your development server:</strong><br>
              <code>npm run dev</code><br>
              <small>Tried ${possibleUrls.length} different ports</small>
            </div>
          `;
        }
      }
    }
  }
  
  tryApiUrls();
});
</script>

{% schema %}
{
  "name": "Product Reviews",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Customer Reviews"
    }
  ],
  "presets": [
    {
      "name": "Product Reviews"
    }
  ]
}
{% endschema %} 