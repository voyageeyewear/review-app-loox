<div class="product-reviews-section" id="product-reviews-{{ section.id }}">
  <h3 style="font-size: 24px; font-weight: 600; margin-bottom: 1rem; color: #1f2937;">‚≠ê Customer Reviews</h3>
  
  <div id="connection-status-{{ section.id }}" style="padding: 8px 12px; border-radius: 4px; font-size: 0.875rem; margin-bottom: 1rem; background: #fef3c7; color: #92400e; border: 1px solid #fbbf24;">
    üîç Auto-detecting server...
  </div>
  
  <div class="reviews-summary" style="display: none; align-items: center; gap: 0.5rem; margin-bottom: 1rem; font-size: 1.1rem;">
    <div class="reviews-stars" style="color: #ffd700; font-size: 1.2rem;"></div>
    <span class="reviews-rating-text"></span>
  </div>
  
  <div id="reviews-content-{{ section.id }}">
    <div style="text-align: center; padding: 2rem; color: #6b7280; background: #f9fafb; border-radius: 6px; border: 1px solid #e5e7eb;">üîÑ Loading reviews...</div>
  </div>
  
  <a href="#" id="write-review-link-{{ section.id }}" 
     style="background: #10b981; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 6px; text-decoration: none; display: none; margin-top: 1rem; font-weight: 500;"
     target="_blank">
    ‚úçÔ∏è Write a Review
  </a>
</div>

<style>
  .product-reviews-section {
    font-family: system-ui, -apple-system, sans-serif;
    max-width: 100%;
    margin: 30px 0;
    padding: 20px;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    background-color: #ffffff;
  }
  
  .reviews-title {
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 1rem;
    color: #1f2937;
  }
  
  .reviews-summary {
    display: none;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    font-size: 1.1rem;
  }
  
  .reviews-stars {
    color: #ffd700;
    font-size: 1.2rem;
  }
  
  .reviews-loading, .reviews-empty {
    text-align: center;
    padding: 2rem;
    color: #6b7280;
    background: #f9fafb;
    border-radius: 6px;
    border: 1px solid #e5e7eb;
  }
  
  .connection-status {
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 0.875rem;
    margin-bottom: 1rem;
  }
  
  .status-success { 
    background: #d1fae5; 
    color: #065f46; 
    border: 1px solid #a7f3d0; 
  }
  
  .status-searching { 
    background: #fef3c7; 
    color: #92400e; 
    border: 1px solid #fbbf24; 
  }
  
  .status-error { 
    background: #fee2e2; 
    color: #dc2626; 
    border: 1px solid #fecaca; 
  }
  
  .write-review-btn {
    background: #10b981;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    text-decoration: none;
    display: inline-block;
    margin-top: 1rem;
    font-weight: 500;
  }
  
  .write-review-btn:hover {
    background: #059669;
    text-decoration: none;
    color: white;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const sectionId = '{{ section.id }}';
  const productId = '{{ product.id }}';
  const reviewsLimit = 10;
  
  const content = document.getElementById('reviews-content-' + sectionId);
  const summary = document.querySelector('#product-reviews-' + sectionId + ' .reviews-summary');
  const writeReviewLink = document.getElementById('write-review-link-' + sectionId);
  const statusEl = document.getElementById('connection-status-' + sectionId);
  
  if (!productId || productId === '') {
    content.innerHTML = '<div>‚ùå Product not found</div>';
    return;
  }
  
  // Ultimate Smart Port Detection
  function generatePortList() {
    let ports = [];
    
    try {
      const lastPort = localStorage.getItem('reviewServerPort');
      if (lastPort && lastPort !== 'null') {
        ports.push(parseInt(lastPort));
      }
    } catch (e) {}
    
    const recentPorts = [59690, 56790, 56853, 53479, 51021, 53850, 49327, 55848];
    recentPorts.forEach(function(p) {
      if (ports.indexOf(p) === -1) ports.push(p);
    });
    
    for (let i = 45000; i <= 65000; i += 100) {
      if (ports.indexOf(i) === -1) ports.push(i);
    }
    
    for (let i = 50000; i <= 60000; i += 50) {
      if (ports.indexOf(i) === -1) ports.push(i);
    }
    
    const standardPorts = [3000, 4000, 5000, 8000, 8080, 9000];
    standardPorts.forEach(function(p) {
      if (ports.indexOf(p) === -1) ports.push(p);
    });
    
    return ports.slice(0, 60);
  }
  
  async function detectActivePort() {
    statusEl.textContent = 'üîç Testing 60+ ports automatically...';
    
    const portsToTry = generatePortList();
    let attempts = 0;
    
    for (let i = 0; i < portsToTry.length; i++) {
      const port = portsToTry[i];
      attempts++;
      
      statusEl.textContent = 'üîç Testing port ' + port + ' (' + attempts + '/' + portsToTry.length + ')...';
      
      try {
        const apiUrl = 'http://localhost:' + port + '/api/reviews?productId=' + encodeURIComponent(productId) + '&limit=' + reviewsLimit;
        
        const controller = new AbortController();
        const timeoutId = setTimeout(function() { controller.abort(); }, 800);
        
        const response = await fetch(apiUrl, {
          mode: 'cors',
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) throw new Error('HTTP ' + response.status);
        
        const data = await response.json();
        
        if (data.success) {
          statusEl.textContent = '‚úÖ Connected to port ' + port + '! ' + data.summary.totalReviews + ' reviews (' + data.summary.averageRating.toFixed(1) + '‚≠ê)';
          statusEl.style.background = '#d1fae5';
          statusEl.style.color = '#065f46';
          
          try {
            localStorage.setItem('reviewServerPort', port.toString());
          } catch (e) {}
          
          if (writeReviewLink) {
            writeReviewLink.href = 'http://localhost:' + port + '/submit-review/' + productId;
            writeReviewLink.style.display = 'inline-block';
          }
          
          if (data.reviews && data.reviews.length > 0) {
            let html = '';
            
            if (data.groupInfo && data.groupInfo.isGrouped) {
              html += '<div style="background: #dbeafe; border: 1px solid #3b82f6; border-radius: 6px; padding: 12px; margin-bottom: 20px; font-size: 14px; color: #1d4ed8;">üì¶ <strong>' + data.groupInfo.name + '</strong> - Reviews from ' + data.groupInfo.productIds.length + ' product variants</div>';
            }
            
            if (data.summary && data.summary.totalReviews > 0) {
              const summaryStars = summary.querySelector('.reviews-stars');
              const summaryText = summary.querySelector('.reviews-rating-text');
              
              if (summaryStars && summaryText) {
                const rating = Math.round(data.summary.averageRating);
                summaryStars.innerHTML = '‚òÖ'.repeat(rating) + '‚òÜ'.repeat(5 - rating);
                summaryText.textContent = data.summary.averageRating.toFixed(1) + ' (' + data.summary.totalReviews + ' reviews)';
                summary.style.display = 'flex';
              }
            }
            
            data.reviews.forEach(function(review) {
              const date = new Date(review.createdAt).toLocaleDateString();
              const stars = '‚òÖ'.repeat(review.rating) + '‚òÜ'.repeat(5 - review.rating);
              
              let imagesHtml = '';
              const images = review.mediaUrls || [];
              
              if (images.length > 0) {
                imagesHtml = '<div style="display: flex; gap: 8px; margin-top: 12px; flex-wrap: wrap;">';
                images.forEach(function(url) {
                  imagesHtml += '<img src="' + url + '" style="width: 80px; height: 80px; border-radius: 6px; object-fit: cover; cursor: pointer; border: 1px solid #e5e7eb;" onclick="window.open(\'' + url + '\', \'_blank\')">';
                });
                imagesHtml += '</div>';
              }
              
              html += '<div style="border-bottom: 1px solid #e5e7eb; padding: 1rem 0;"><div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;"><div style="font-weight: 600; color: #1f2937;">üë§ ' + review.customerName + '</div><div style="color: #6b7280; font-size: 0.875rem;">' + date + '</div></div><div style="color: #ffd700; font-size: 1.2rem;">' + stars + '</div><div style="margin: 0.5rem 0; line-height: 1.6; color: #374151;">' + review.reviewText + '</div>' + imagesHtml + '</div>';
            });
            
            content.innerHTML = html;
          } else {
            content.innerHTML = '<div>No reviews yet. Be the first to review this product!</div>';
          }
          return;
        }
        
      } catch (error) {
        // Continue to next port
      }
    }
    
    statusEl.textContent = '‚ùå No server found after testing ' + attempts + ' ports';
    statusEl.style.background = '#fee2e2';
    statusEl.style.color = '#dc2626';
    content.innerHTML = '<div>‚ùå Server not found<br><strong>Start with:</strong> npm run dev</div>';
  }
  
  detectActivePort();
});
</script>

{% schema %}
{
  "name": "Ultimate Smart Reviews",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Customer Reviews"
    },
    {
      "type": "paragraph",
      "content": "üöÄ Ultimate smart widget that automatically finds ANY development server port. Tests 60+ ports intelligently and remembers successful connections. Never needs manual updates - works forever!"
    }
  ],
  "presets": [
    {
      "name": "Ultimate Smart Reviews"
    }
  ]
}
{% endschema %}
